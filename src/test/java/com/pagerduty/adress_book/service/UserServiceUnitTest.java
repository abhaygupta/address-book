package com.pagerduty.adress_book.service;

import org.junit.After;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;

import com.pagerduty.adress_book.model.Users;
import com.pagerduty.adress_book.request.GetUserDetailRequest;
import com.pagerduty.adress_book.request.ListUserRequest;

import reactor.core.publisher.Mono;

/**
 * TODO: there can be more tests asserting URL built; what is contained in URL
 * 
 * @author abhay.gupta
 *
 */
public class UserServiceUnitTest {

	private static final UserService userService = Mockito.spy(new UserService());

	@After
	public void afterTest() {
		Mockito.reset(userService);
	}

	@Test
	public void testListUsersRequest() {
		ListUserRequest request = new ListUserRequest(10, 0);
		RequestHeadersSpec requestHeaderSpec = Mockito.mock(RequestHeadersSpec.class);
		ResponseSpec responseSpec = Mockito.mock(ResponseSpec.class);
		Mono<Users> monoResponse = Mockito.mock(Mono.class);
		Users users = Mockito.mock(Users.class);

		Mockito.when(userService.buildListSpec(request)).thenReturn(requestHeaderSpec);
		Mockito.when(requestHeaderSpec.retrieve()).thenReturn(responseSpec);
		Mockito.when(responseSpec.bodyToMono(Users.class)).thenReturn(monoResponse);
		Mockito.when(monoResponse.block()).thenReturn(users);

		Users actualResponse = userService.list(request);
		Assert.assertNotNull(actualResponse);
		Assert.assertEquals(users, actualResponse);

		Mockito.verify(requestHeaderSpec).retrieve();
		Mockito.verify(responseSpec).bodyToMono(Users.class);
		Mockito.verify(monoResponse).block();
	}

	@Test
	public void testBuildListSpec() {
		ListUserRequest request = new ListUserRequest(10, 0);
		// TODO: verify URL generated by call?
		Assert.assertNotNull(userService.buildListSpec(request));
	}

	@Test
	public void testGetUsersDetailsRequest() {
		GetUserDetailRequest request = new GetUserDetailRequest(10, 0, false, "Alan", null, null);
		RequestHeadersSpec requestHeaderSpec = Mockito.mock(RequestHeadersSpec.class);
		ResponseSpec responseSpec = Mockito.mock(ResponseSpec.class);
		Mono<Users> monoResponse = Mockito.mock(Mono.class);
		Users users = Mockito.mock(Users.class);

		Mockito.when(userService.buildGetDetailsRequest(request)).thenReturn(requestHeaderSpec);
		Mockito.when(requestHeaderSpec.retrieve()).thenReturn(responseSpec);
		Mockito.when(responseSpec.bodyToMono(Users.class)).thenReturn(monoResponse);
		Mockito.when(monoResponse.block()).thenReturn(users);

		Users actualResponse = userService.getDetails(request);
		Assert.assertNotNull(actualResponse);
		Assert.assertEquals(users, actualResponse);

		Mockito.verify(requestHeaderSpec).retrieve();
		Mockito.verify(responseSpec).bodyToMono(Users.class);
		Mockito.verify(monoResponse).block();
	}

	@Test
	public void testBuildGetDetailsRequest() {
		GetUserDetailRequest request = new GetUserDetailRequest(10, 0, false, "Alan", null, null);
		// TODO: verify URL generated by call?
		Assert.assertNotNull(userService.buildGetDetailsRequest(request));
	}
}
